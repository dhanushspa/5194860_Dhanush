#include <stdio.h>
void mergeSort(int arr[], int low, int high);
void merge(int arr[], int low, int mid, int high);
int main() {
    int T;
    if (scanf("%d", &T) != 1) return 0;

    while (T--) {
        int N, K;
        scanf("%d %d", &N, &K);
        static int A[1000], B[1000]; 
        for (int i = 0; i < N; i++) scanf("%d", &A[i]);
        for (int i = 0; i < N; i++) scanf("%d", &B[i]);
        mergeSort(A, 0, N - 1);
        mergeSort(B, 0, N - 1);
        int possible = 1;
        for (int i = 0; i < N; i++) {
            if (A[i] + B[N - 1 - i] < K) {
                possible = 0;
                break;
            }
        }
        printf("%s\n", possible ? "YES" : "NO");
    }
    return 0;
}
void mergeSort(int arr[], int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
}
void merge(int arr[], int low, int mid, int high) {
    int temp[1000];
    int i = low, j = mid + 1, k = 0;

    while (i <= mid && j <= high) {
        temp[k++] = (arr[i] <= arr[j]) ? arr[i++] : arr[j++];
    }
    while (i <= mid) temp[k++] = arr[i++];
    while (j <= high) temp[k++] = arr[j++];
    for (i = low, k = 0; i <= high; i++, k++) {
        arr[i] = temp[k];
    }
}
